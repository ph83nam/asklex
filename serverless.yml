service: lexofood
provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  versionFunctions: false # Optional function versioning
  stackTags: # Optional CF stack tags
    name: lexofood-${self:provider.stage}
  environment:
    DYNAMO_TABLE_PREFIX: ${self:provider.stage}-
    REDIS_URL: {"Fn::Join" : ["", ["redis://", {"Fn::GetAtt" : ["cacheCluster", "RedisEndpoint.Address"]}, ":", {"Fn::GetAtt" : ["cacheCluster", "RedisEndpoint.Port"]}]]}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
custom:
  defaultStage: dev
  config: ${file(./config.yml)}
  serverless-offline:
    babelOptions:
      presets: ["es2015", "stage-2"]
    resourceRoutes: true
  profiles:
    dev: lexofood-dev
    prod: lexofood-prod
functions:
  messengerMessage:
    handler: messenger/bot.message
    events:
      - http: post messenger
      - http: get messenger
    environment:
      FB_VERIFY_TOKEN: ${self:custom.config.fbVerifyToken}
      FB_PAGE_ACCESS_TOKEN: ${self:custom.config.fbPageAccessToken}
      FB_API_VERSION: ${self:custom.config.fbApiVersion}
  usersCreate:
    handler: users/handler
    events:
      - http: post users
  usersGet:
    handler: users/handler.getUser
    events:
      - http: get users
  usersUpdate:
    handler: users/handler
    events:
      - http: put users
  usersDelete:
    handler: users/handler
    events:
      - http: delete users
  runCrawler:
    handler: takeaway/crawl.run
    events:
      - schedule: cron(30 0,6,12 * * ? *)
  saveRestaurant:
    handler: takeaway/restaurant.save
    events:
      - http: post takeaway/restaurants
  saveFood:
    handler: takeaway/food.save
    events:
      - http: post takeaway/foods
resources:
  Resources:
    #cacheSecurityGroup:
    #  Type: "AWS::EC2::SecurityGroup"
    #  Properties:
    #    GroupDescription: "Elasticache Security Group"
    #    SecurityGroupIngress:
    #      -
    #        IpProtocol: "tcp"
    #        FromPort: "6379"
    #        ToPort: "6379"
    #        SourceSecurityGroupName:
    #          Ref: "InstanceSecurityGroup"
    cacheSecurityGroup:
      Type: "AWS::ElastiCache::SecurityGroup"
      Properties:
        Description: String
    cacheCluster:
      Type: "AWS::ElastiCache::CacheCluster"
      Properties:
        AutoMinorVersionUpgrade: "true"
        Engine: "redis"
        CacheNodeType: "cache.t2.micro"
        NumCacheNodes: "1"
        CacheSecurityGroupNames:
          - {"Ref": "cacheSecurityGroup"}
    #    VpcSecurityGroupIds:
    #      -
    #        Fn::GetAtt:
    #          - "cacheSecurityGroup"
    #          - "GroupId"
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          #- AttributeName: firstName
          #  AttributeType: S
          #- AttributeName: lastName
          #  AttributeType: S
          #- AttributeName: sex
          #  AttributeType: S
          #- AttributeName: email
          #  AttributeType: S
          #- AttributeName: mobile
          #  AttributeType: S
          #- AttributeName: createdAt
          #  AttributeType: S
          #- AttributeName: updatedAt
          #  AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    restaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-restaurants
        AttributeDefinitions:
          - AttributeName: rid
            AttributeType: S
          #- AttributeName: name
          #  AttributeType: S
          #- AttributeName: status
          #  AttributeType: S
          #- AttributeName: locale
          #  AttributeType: S
          #- AttributeName: phone
          #  AttributeType: S
          #- AttributeName: email
          #  AttributeType: S
          #- AttributeName: address
          #  AttributeType: S
          #- AttributeName: address2
          #  AttributeType: S
          #- AttributeName: locality
          #  AttributeType: S
          #- AttributeName: city
          #  AttributeType: S
          #- AttributeName: state
          #  AttributeType: S
          #- AttributeName: country
          #  AttributeType: S
          #- AttributeName: createdAt
          #  AttributeType: S
          #- AttributeName: updatedAt
          #  AttributeType: S
        KeySchema:
          - AttributeName: rid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    foodsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-foods
        AttributeDefinitions:
          - AttributeName: fid
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          #- AttributeName: types
          #  AttributeType: SS
          #- AttributeName: images
          #  AttributeType: SS
          #- AttributeName: price
          #  AttributeType: N
          #- AttributeName: rating
          #  AttributeType: N
          #- AttributeName: available
          #  AttributeType: N
          #- AttributeName: createdAt
          #  AttributeType: S
          #- AttributeName: updatedAt
          #  AttributeType: S
        KeySchema:
          - AttributeName: fid
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    foodTLsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-foodTLs
        AttributeDefinitions:
          - AttributeName: typeLocality
            AttributeType: S
          - AttributeName: fidName
            AttributeType: S
          #- AttributeName: price
          #  AttributeType: N
          #- AttributeName: rating
          #  AttributeType: N
        KeySchema:
          - AttributeName: typeLocality
            KeyType: HASH
          - AttributeName: fidName
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
plugins:
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list